Context Introduction:
There is a remote VDS server (hosted on cloud.digitalocean.com) using Ubuntu 22.04 (LTS) x64.

CHAT-GPT, YOUR TASK:
Configure a private VPN using Outline running inside Docker.  
You should make every effort to ensure that the script configures the server in such a way that external websites cannot detect the use of a VPN.  
(As far as I know, this can be achieved through approaches such as:  
Traffic obfuscation, using the HTTPS port, TLS/SSL tunneling, and implementing methods to bypass DPI (Deep Packet Inspection)).  
Analyze independently which approaches and technologies we can incorporate into this script.

Iâ€™ve also heard that third-party websites can detect my use of a VPN by analyzing bidirectional ping responses. Please add the appropriate configurations to the bash script to prevent such detection.

Based on advice I found online, the following recommendations might be relevant (please analyze and apply them if appropriate in our situation):

"""
Avoiding Detection via Bidirectional Ping
Description: A VPN server can be identified by unusual behavior in its responses to ping requests.


Solutions:
Block ICMP (ping) at the VPN server level:
iptables -A INPUT -p icmp --icmp-type echo-request -j DROP
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j DROP

Configure the server to respond to ICMP requests with delays or randomization:
tc qdisc add dev eth0 root netem delay 100ms 20ms distribution normal
"""

Additional requirements can be found in below in the document.

Think about the correct sequence of installation and configuration.

Script and Log Formatting Requirements:
1. The entire script must be fully commented in Russian.
2. The script must output logs that inform the user about the execution of each individual logical process.
3. Use the echo command for logging.
4. All logs must be color-coded to make it easier for the user to distinguish successfully completed processes from others.
5. After configuring all necessary components, the script must print all generated keys, passwords, and configuration strings (e.g., the string for Outline Manager like: {"apiUrl":"https://128.199.56.243:443/oaUAMa0vlr0ev57n9MmQsA","certSha256:88227EE7EAB773D11066E7B2BBB33BD57148D5FB476BEF87F874FAE8D03C6E54"}).

Script Construction Principles:
1. Before starting the main work, the script must perform all necessary preparations and checks.
   Think about what needs to be checked in such cases. (For example, open ports or if the software planned for installation has already been installed; in such cases, properly locate and remove all old software, keys, certificates, etc.).
   
2. Before each logical step, the script must verify its feasibility and log the information.
3. The script must execute to completion in any case (DO NOT USE the exit command or any other commands that may interrupt script execution).
4. If any error occurs during script execution, program the script to log an entry in the console that forms a question for CHAT-GPT with detailed information about the problem.
5. At the end of configuring all components, the script must include code that tests the results and informs the user in detail.

Testing Requirements After Configuration:
1. Think about how to properly test everything the script installed and configured earlier.
3. Also, output commands to the console that will allow the user to copy and manually perform tests.
4. The server on which I will execute the script you created has this address (128.199.56.243) and this access password: Auth777Key$DO, you can use this information if you need it in tests.


Final Script Section Requirements:
1. At the very bottom of the document, there must be hidden, commented-out code that removes everything the script installed and configured earlier.
   Think about how to do this correctly and safely (e.g., gradually stopping processes before deleting software and any possible certificates, caches, keys, etc.) remove from the server, for this please,
   write bash script in separated file.